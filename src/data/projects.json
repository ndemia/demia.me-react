{
	"projects": [
		{
			"id": "marketplace",
			"content": [
				{
					"type": "title",
					"text": "Context"
				},
				{
					"type": "paragraph",
					"text": "Until now, this assignment has been the most difficult one. It's great to say that I've been able to correct a lot of previous mistakes that I've made in the first iteration of this project."
				},
				{
					"type": "title",
					"text": "Design"
				},
				{
					"type": "paragraph",
					"text": "A design was provided, but I decided to ditch it and make a more fun one instead :)"
				},
				{
					"type": "title",
					"text": "Tech Stack"
				},
				{
					"type": "paragraph",
					"text": "HTML, CSS (SASS), TypeScript."
				},
				{
					"type": "title",
					"text": "Pre-built part"
				},
				{
					"type": "paragraph",
					"text": "There is a web application with a pre-authenticated user. Each user has an amount of gold coins, which is shown somewhere in the top bar.There is a stock of items to offer, with a price in gold coins and an available amount. E.g.: 3 swords costing 35 each and 2 helmets costing 12 each and so on. For the simplicity of the setup, pre-built storage is in-memory (i.e. some static collections) and the requests to the “back-end” are simulated (see service.js)."
				},
				{
					"type": "title",
					"text": "Part to be built"
				},
				{
					"type": "paragraph",
					"text": "Make “Buy” button in the top bar show the dialog which will allow user to buy available items (to be displayed in a modal).User can see available items and their price, can type in an amount to buy (integer value), or increment/decrement it with buttons + and -. Total cost is calculated in real-time and reflects changes to the amount.If the total cost exceeds available money, message appears and buy button is disabled.When user clicks 'Buy', dialog is closed, item stocks are updated and user balance is updated. There is no need to store bought items.User can also close the dialog via cancel or close buttons.Make sure constraints with regard to number of items available and user balance are not violated. Make sure feedback is available to users if they cannot accomplish the action (e.g. item is no longer available or a request to the backend fails).A 'random' failure request is implemented for the “Buy” request (e.g. once every 3 requests) and the failure is handled."
				},
				{
					"type": "title",
					"text": "Problems"
				},
				{
					"type": "paragraph",
					"text": "The first time I did this project I didn't comprehend that the fake database worked as an API, and replaced it with a Class. It worked, but it was not the original intention. For this new iteration, I corrected this mistake, and reverted to the original code. It didn't come without its challenges."
				},
				{
					"type": "paragraph",
					"text": "The API handled requests for each information individually, which makes sense: you request the user, or you request the stock. Each request has a 1 in 3 chances to fail (by design). A lot of the checks during the purchasing process depend on this calls to validate the available item quantity. As well as the item's price, specially when calculating total prices. With so many checks, calls, and potential failures, the challenge was to keep calls to a minimun. Which I managed to achieve! Once that was done successfully, I just passed that information around between the functions or elements that would need it."
				},
				{
					"type": "title",
					"text": "Accessibility"
				},
				{
					"type": "paragraph",
					"text": " I learned about the inert attribute (and its polyfill), and how to use it to 'disable' parts of the website so that they are not keyboard accessible. In this particular case, disabling the 'back' of the website while the modal is open."
				},
				{
					"type": "paragraph",
					"text": "I also got familiar with 'aria-live' and 'role' attributes so that screen readers can announce changes in the UI. For example, prices updating, alerts and error messages."
				},
				{
					"type": "paragraph",
					"text": "And finally, I got more comfortable with aria-label, aria-hidden, and improving keyboard navigation."
				},
				{
					"type": "title",
					"text": "Learnings"
				},
				{
					"type": "paragraph",
					"text": " TypeScript allowed me to better understand JavaScript. I has also helped me write better, more structered code. "
				},
				{
					"type": "paragraph",
					"text": "I got more comfortable with promises and asynchronous JavaScript, as well as with handling errors, and managing the flow of information, among other things."
				}
			]
		},
		{
			"id": "movie",
			"content": [
				{
					"type": "title",
					"text": "Context"
				},
				{
					"type": "paragraph",
					"text": "Another of my interview test series. This time around, I did manage to pass the technical assessment! With some good parts and some bad parts, of course."
				},
				{
					"type": "title",
					"text": "Tech Stack"
				},
				{
					"type": "paragraph",
					"text": "HTML, CSS (SASS), TypeScript."
				},
				{
					"type": "title",
					"text": "Requirements"
				},
				{
					"type": "paragraph",
					"text": "The assignment was meant to be completed in vanilla JavaScript, without any frameworks or libraries. I've rebuilt it using TypeScript, improving it wherever I could, and to get more familiar with it.I was not allowed to use any framework to make the request (Axios or similar). UI frameworks were allowed but highly discouraged.Mobile-first approach.Each result should have its own card (or among those lines, can't remember exactly as it was long ago and I haven't kept the documentation).There has to be a top bar, where the search box will be located. I'm going to ditch this, just to have more flexibility :)"
				},
				{
					"type": "title",
					"text": "Problems"
				},
				{
					"type": "paragraph",
					"text": "It was my first time dealing with pagination and it was the most dificult part. I had to rely on a third party solution to accomplish it, but not before understanding how it works. Although I do need to practice it more often ;) "
				},
				{
					"type": "paragraph",
					"text": "Dealing with the card layout was also tricky, since there's always going to be some undesired whitespace, whether inside the car to match all the heights, or outside to avoid it. I chose the latter one."
				},
				{
					"type": "paragraph",
					"text": "Learning how to manage and hide the API key, in order to be able to publish the project on GitHub, also took some time to properly grasp."
				},
				{
					"type": "title",
					"text": "Learnings"
				},
				{
					"type": "paragraph",
					"text": "I got more comfortable with promises and asynchronous JavaScript in general, as well as with TypeScript."
				},
				{
					"type": "paragraph",
					"text": "Learned about Netlify, hiding API keys in environment variables, and deploying to it."
				},
				{
					"type": "paragraph",
					"text": "Getting more familiar with testing accessibility, with keyboard navigation and screen-readers."
				}
			]
		},
		{
			"id": "daily",
			"content": [
				{
					"type": "title",
					"text": "Context"
				},
				{
					"type": "paragraph",
					"text": "Here you will find a diverse collection of UI work. Some from the Daily UI challenge, others inspired or based on design work that I did, and others from Frontend Mentor. These are all prototypes."
				}
			]
		},
		{
			"id": "flight",
			"content": [
				{
					"type": "title",
					"text": "Context"
				},
				{
					"type": "paragraph",
					"text": "As part of the process for a role at a digital marketing agency, they gave me the website of an airline to work on. The task was to create a program that would check the flights that the user had previously searched for, and display the last 3 the next time it loaded. The main condition was that the code had to work from the console, like it was injected. This assignment relied on another website, and I decided to replicate it as a way to practice to improve my initial solution, despite this not being exactly the same."
				},
				{
					"type": "title",
					"text": "Requirements"
				},
				{
					"type": "paragraph",
					"text": "To be completed with JavaScript and it had to work from the browser's console.The results' design should fit in with the rest of the website."
				},
				{
					"type": "title",
					"text": "Tech Stack"
				},
				{
					"type": "paragraph",
					"text": "HTML, CSS (SASS), TypeScript."
				},
				{
					"type": "title",
					"text": "Process"
				},
				{
					"type": "paragraph",
					"text": "First, I had to dig around the website's code to understand its structure. I found out that the website had two forms, one for desktop and another one for mobile, and the mobile form was the one that actually processed the form. I also discovered that it used localStorage to save previously searched flights. Being a detective can be fun. Design-wise, I made the results blend with the rest of the website, which looked nice and was appreciated."
				},
				{
					"type": "title",
					"text": "Problems"
				},
				{
					"type": "paragraph",
					"text": "Due to my lack of knowledge at that particular moment in time, I had to hard-code some values, and overall my code was not scalable. It still worked though! hehe."
				},
				{
					"type": "title",
					"text": "Learnings"
				},
				{
					"type": "paragraph",
					"text": "I'd say I'm much more conscious about making my code scalable by learning and applying best practices. I also don't hard-code values anymore. I didn't get the job, but I was still proud of what I had achieved. Now that my skills have improved, I look back at this assignment fondly."
				}
			]
		}
	]
}
