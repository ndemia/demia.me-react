{
	"projects": [
		{
			"id": "marketplace",
			"title": "Marketplace",
			"description": "A small marketplace to buy items. It comes with optional sound effects to enhance your experience.",
			"image_1x": "/images/marketplace_1x.png",
			"image_2x": "/images/marketplace_2x.png",
			"alt": "A modal window serving as a market for medieval items like swords and shields.",
			"link": "/project/marketplace",
			"tags": ["HTML", "CSS", "TypeScript"],
			"github": "https://github.com/ndemia/marketplace",
			"demo": "https://ndemia.github.io/marketplace/",
			"content": [
				{
					"type": "title",
					"text": "Context"
				},
				{
					"type": "paragraph",
					"text": "Second installment in my series of interview tests. This time for a SaaS company specialized in workspace software. Until now, this assignment has been the most difficult one. It's great to say that I've been able to correct a lot of previous mistakes that I've made in the first iteration of this project."
				},
				{
					"type": "title",
					"text": "Design"
				},
				{
					"type": "paragraph",
					"text": "A design was provided, but I decided to ditch it and make a more fun one instead :)"
				},
				{
					"type": "title",
					"text": "Tech Stack"
				},
				{
					"type": "paragraph",
					"text": "HTML, CSS (SASS), TypeScript."
				},
				{
					"type": "title",
					"text": "Pre-built part"
				},
				{
					"type": "list",
					"items": [
						"There is a web application with a pre-authenticated user.",
						"Each user has an amount of gold coins, which is shown somewhere in the top bar.",
						"There is a stock of items to offer, with a price in gold coins and an available amount. E.g.: 3 swords costing 35 each and 2 helmets costing 12 each and so on.",
						"For the simplicity of the setup, pre-built storage is in-memory (i.e. some static collections) and the requests to the “back-end” are simulated (see service.js)."
					]
				},
				{
					"type": "title",
					"text": "Part to be built"
				},
				{
					"type": "list",
					"items": [
						"Make “Buy” button in the top bar show the dialog which will allow user to buy available items (to be displayed in a modal).",
						"Users can see available items and their price, can type in an amount to buy (integer value), or increment/decrement it with buttons + and -.",
						"Total cost is calculated in real-time and reflects changes to the amount. If the total cost exceeds available money, message appears and buy button is disabled.",
						"When user clicks 'Buy', dialog is closed, item stocks are updated and user balance is updated. There is no need to store bought items. User can also close the dialog via cancel or close buttons.",
						"Make sure constraints with regard to number of items available and user balance are not violated.",
						"Make sure feedback is available to users if they cannot accomplish the action (e.g. item is no longer available or a request to the backend fails).",
						"A 'random' failure request is implemented for the “Buy” request (e.g. once every 3 requests) and the failure is handled."
					]
				},
				{
					"type": "title",
					"text": "Implementation requirements"
				},
				{
					"type": "list",
					"items": [
						"Existing features should continue to function.",
						"The domain logic described for the dialog is implemented (real-time updating, constraints/validation checks, updating of the user/stock on purchase, feedback on failure).",
						"A “random” failure request is implemented for the 'Buy' request (e.g. once every 3 requests) and the failure is handled.",
						"You don't need to have any database or backend (changes) though if you feel like giving it a try, you can. We do however expect you to write a service / proxy which returns promises to simulate requests to the backend (preferable including some random failures).",
						"The original test used jQuery but since I'm learning TypeScript, I decided to do use it for this iteration of the project."
					]
				},
				{
					"type": "title",
					"text": "Problems"
				},
				{
					"type": "paragraph",
					"text": "The first time I did this project I didn't comprehend that the database worked as an API, and replaced it with a Class. It worked, but it was not the original intention. For this new iteration, I corrected this mistake and reverted to the original code to keep that core functionality and worked with that."
				},
				{
					"type": "paragraph",
					"text": "The API handled requests for each piece of information individually, which makes sense: you request the user, or you request the stock. Each request has a 1 in 3 chance to fail (by design). A lot of the logic of the checks during the purchasing process depends on these calls to validate the available item quantity, for example. As well as the item's price, especially when calculating total prices. With so many checks, calls, and potential failures, the challenge was to keep calls to a minimum, which I managed to achieve! Now it only makes one call to the API, and then it just passes that information around between the functions that need it."
				},
				{
					"type": "paragraph",
					"text": "Another challenge arose from creating the validation checks during the purchasing process. It was hard, and also confusing at times with many functions checking different values, for them to later refer to or use one another, or its return value."
				},
				{
					"type": "title",
					"text": "Accessibility"
				},
				{
					"type": "paragraph",
					"text": "I got more comfortable using a screen-reader. I learned about the inert attribute (and its polyfill), and how to use it to 'disable' parts of the website so that they would not be keyboard accessible. In this particular case, disabling the 'back' of the website while the modal is open."
				},
				{
					"type": "paragraph",
					"text": "I also got familiar with 'aria-live' and 'role' attributes so that screen readers can announce changes in the UI. For example, when prices update, alerts and error messages appear. Finally, I got more comfortable with aria-label, aria-hidden, and improving keyboard navigation overall."
				},
				{
					"type": "title",
					"text": "Learnings"
				},
				{
					"type": "paragraph",
					"text": " TypeScript allowed me to better understand JavaScript. I has also helped me write better, more structered code. "
				},
				{
					"type": "paragraph",
					"text": "I got more comfortable with promises and asynchronous JavaScript, as well as with handling errors, and managing the flow of information, among other things."
				}
			]
		},
		{
			"id": "movie",
			"title": "Movie Search",
			"description": "A simple movie search website that uses The Open Movie Database to retrieve the results",
			"image_1x": "/images/movie_1x.png",
			"image_2x": "/images/movie_2x.png",
			"alt": "Movie search results.",
			"link": "/project/movie",
			"tags": ["HTML", "CSS", "TypeScript"],
			"github": "https://github.com/ndemia/movie-search",
			"demo": "https://ndemia-movie.netlify.app/",
			"content": [
				{
					"type": "title",
					"text": "Context"
				},
				{
					"type": "paragraph",
					"text": "The third installment series of interview tests. This assignment was part of the process for a position at a payments processor company. It's great to realize that I managed to make a lot of improvements from what I originally did."
				},
				{
					"type": "title",
					"text": "Tech Stack"
				},
				{
					"type": "paragraph",
					"text": "HTML, CSS (SASS), TypeScript."
				},
				{
					"type": "title",
					"text": "Requirements"
				},
				{
					"type": "list",
					"items": [
						"The assignment was meant to be completed in vanilla JavaScript, without any frameworks or libraries, but to practice I've rebuilt it using TypeScript this time.",
						"It was not allowed to use any external libraries to make the request either (Axios or similar).",
						"Mobile-first approach.",
						"Each result should have its own card (or among those lines, can't remember exactly as it was long ago and I haven't kept the documentation)."
					]
				},
				{
					"type": "title",
					"text": "Problems"
				},
				{
					"type": "paragraph",
					"text": "It was my first time dealing with pagination and it was the most difficult part. I had to rely on a third-party solution to accomplish it, but not before understanding how it works. Although I do need to practice it more often, since it's still complicated to achieve. "
				},
				{
					"type": "paragraph",
					"text": "Dealing with the card layout was also tricky since there's always going to be some undesired whitespace, whether inside the car to match all the heights, or outside to avoid it. I chose the latter one in this case."
				},
				{
					"type": "paragraph",
					"text": "Another challenge was learning how to manage and hide the API key. I didn't manage it the first time I did this assignment, but this time I did. And it's pretty cool, since I also learned about Netlify which I use until today."
				},
				{
					"type": "title",
					"text": "Learnings"
				},
				{
					"type": "paragraph",
					"text": "I got more comfortable with promises and asynchronous JavaScript in general, as well as with TypeScript."
				},
				{
					"type": "paragraph",
					"text": "I got more comfortable with asynchronous code in general, as well as with TypeScript. Learned about Netlify, working with external APIs, hiding API keys in environment variables, and deploying the project. Got more familiar with testing accessibility (keyboard navigation and using screen-readers)."
				},
				{
					"type": "paragraph",
					"text": "Getting more familiar with testing accessibility, with keyboard navigation and screen-readers."
				}
			]
		},
		{
			"id": "daily",
			"title": "Daily UI",
			"description": "A collection of different UIs designed and built by me.",
			"image_1x": "/images/dailyui_1x.png",
			"image_2x": "/images/dailyui_2x.png",
			"link": "/project/daily",
			"alt": "A calculator made over a grandient background.",
			"tags": ["HTML", "CSS", "JavaScript"],
			"github": "https://github.com/ndemia/daily-ui",
			"demo": "https://ndemia.github.io/daily-ui/",
			"content": [
				{
					"type": "title",
					"text": "Context"
				},
				{
					"type": "paragraph",
					"text": "Here you will find a diverse collection of UI work. Some from the Daily UI challenge, others inspired or based on design work that I did, and others from Frontend Mentor. These are all prototypes."
				}
			]
		}
	]
}
